#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

typedef struct {
    int data[MAX_SIZE];
    int top;
} Stack;

void init(Stack *stack) {
    stack->top = -1;
}

int isEmpty(Stack *stack) {
    return stack->top == -1;
}

int isFull(Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
        return;
    }
    stack->data[++stack->top] = value;
}

int pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack->data[stack->top--];
}

void deleteMiddleElement(Stack *stack) {
    int size = stack->top + 1;
    int middleIndex = (size + 1) / 2;
    Stack tempStack;
    init(&tempStack);

    for (int i = 0; i < middleIndex - 1; i++) {
        push(&tempStack, pop(stack));
    }

    pop(stack);

    while (!isEmpty(&tempStack)) {
        push(stack, pop(&tempStack));
    }
}

int main() {
    Stack stack;
    init(&stack);

    push(&stack, 1);
    push(&stack, 2);
    push(&stack, 3);
    push(&stack, 4);
    push(&stack, 5);

    printf("Stack before deletion: ");
    for (int i = 0; i <= stack.top; i++) {
        printf("%d ", stack.data[i]);
    }
    printf("\n");

    deleteMiddleElement(&stack);

    printf("Stack after deletion: ");
    for (int i = 0; i <= stack.top; i++) {
        printf("%d ", stack.data[i]);
    }
    printf("\n");

    return 0;
}
