#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to display the linked list
void displayList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Function to insert a node at the beginning of the list
struct Node* insertAtBeginning(struct Node* head, int value) {
    struct Node* newNode = createNode(value);
    newNode->next = head;
    return newNode;
}

// Function to free the allocated memory for the linked list
void freeList(struct Node* head) {
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
}

// Function to sort the linked list in ascending order
struct Node* sortList(struct Node* head) {
    struct Node *current, *index;
    int temp;

    if (head == NULL) {
        return NULL; // Empty list
    }

    for (current = head; current->next != NULL; current = current->next) {
        for (index = current->next; index != NULL; index = index->next) {
            if (current->data > index->data) {
                // Swap the data values
                temp = current->data;
                current->data = index->data;
                index->data = temp;
            }
        }
    }

    return head;
}

// Main function
int main() {
    // Creating nodes
    struct Node* head = createNode(30);
    head = insertAtBeginning(head, 10);
    head = insertAtBeginning(head, 20);

    // Displaying the original linked list
    printf("Original Linked List: ");
    displayList(head);

    // Sorting the linked list
    head = sortList(head);

    // Displaying the sorted linked list
    printf("Sorted Linked List: ");
    displayList(head);

    // Free the allocated memory
    freeList(head);

    return 0;
}
