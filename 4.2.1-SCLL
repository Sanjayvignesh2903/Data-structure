#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertAtBeginning(struct Node** head, int value) {
    
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;

    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head;
    } else {
        
        struct Node* last = *head;
        while (last->next != *head) {
            last = last->next;
        }

        newNode->next = *head;
        last->next = newNode;
        *head = newNode;
    }
}

void insertAtMiddle(struct Node** head, int value, int position) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;

    if (*head == NULL || position == 0) {
        insertAtBeginning(head, value);
        return;
    }

    struct Node* current = *head;
    int count = 0;
    while (count < position - 1 && current->next != *head) {
        current = current->next;
        count++;
    }

    newNode->next = current->next;
    current->next = newNode;
}

void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;

    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head;
    } else {
     
        struct Node* last = *head;
        while (last->next != *head) {
            last = last->next;
        }

        last->next = newNode;
        newNode->next = *head;
    }
}

void printList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* current = head;
    do {
        printf("%d ", current->data);
        current = current->next;
    } while (current != head);
    printf("\n");
}

int main() {
    struct Node* head = NULL;

    insertAtBeginning(&head, 10);
    insertAtMiddle(&head, 20, 1);
    insertAtEnd(&head, 30);

    printList(head);

    return 0;
}
