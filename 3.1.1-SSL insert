#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to display the linked list
void displayList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Function to insert at the beginning of the list
struct Node* insertAtBeginning(struct Node* head, int value) {
    struct Node* newNode = createNode(value);
    newNode->next = head;
    return newNode;
}

// Function to insert at the end of the list
struct Node* insertAtEnd(struct Node* head, int value) {
    struct Node* newNode = createNode(value);
    if (head == NULL) {
        return newNode;
    }

    struct Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
    return head;
}

// Function to insert at the middle of the list
struct Node* insertAtMiddle(struct Node* head, int value, int position) {
    struct Node* newNode = createNode(value);
    if (position == 0) {
        newNode->next = head;
        return newNode;
    }

    struct Node* current = head;
    int count = 0;
    while (count < position - 1 && current != NULL) {
        current = current->next;
        count++;
    }

    if (current == NULL) {
        printf("Position out of bounds\n");
        free(newNode);
        return head;
    }

    newNode->next = current->next;
    current->next = newNode;
    return head;
}

// Function to free the allocated memory for the linked list
void freeList(struct Node* head) {
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
}

// Main function
int main() {
    struct Node* head = NULL;

    // Insert at the beginning
    head = insertAtBeginning(head, 10);
    head = insertAtBeginning(head, 5);

    // Insert at the end
    head = insertAtEnd(head, 20);
    head = insertAtEnd(head, 30);

    // Insert at the middle
    head = insertAtMiddle(head, 15, 2);

    // Display the linked list
    displayList(head);

    // Free the allocated memory
    freeList(head);

    return 0;
}
