#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to display the linked list
void displayList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Function to delete from the beginning of the list
struct Node* deleteFromBeginning(struct Node* head) {
    if (head == NULL) {
        printf("List is empty, cannot delete from the beginning\n");
        return NULL;
    }

    struct Node* newHead = head->next;
    free(head);
    return newHead;
}

// Function to delete from the end of the list
struct Node* deleteFromEnd(struct Node* head) {
    if (head == NULL) {
        printf("List is empty, cannot delete from the end\n");
        return NULL;
    }

    if (head->next == NULL) {
        free(head);
        return NULL;
    }

    struct Node* current = head;
    struct Node* previous = NULL;

    while (current->next != NULL) {
        previous = current;
        current = current->next;
    }

    free(current);
    previous->next = NULL;
    return head;
}

// Function to delete from the middle of the list
struct Node* deleteFromMiddle(struct Node* head, int position) {
    if (head == NULL) {
        printf("List is empty, cannot delete from the middle\n");
        return NULL;
    }

    if (position == 0) {
        struct Node* newHead = head->next;
        free(head);
        return newHead;
    }

    struct Node* current = head;
    struct Node* previous = NULL;
    int count = 0;

    while (count < position && current != NULL) {
        previous = current;
        current = current->next;
        count++;
    }

    if (current == NULL) {
        printf("Position out of bounds\n");
        return head;
    }

    previous->next = current->next;
    free(current);
    return head;
}

// Function to free the allocated memory for the linked list
void freeList(struct Node* head) {
    struct Node* current = head;
    struct Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
}

// Main function
int main() {
    struct Node* head = NULL;

    // Insert elements
    head = createNode(10);
    head->next = createNode(20);
    head->next->next = createNode(30);

    // Display the original linked list
    printf("Original Linked List:\n");
    displayList(head);

    // Delete from the beginning
    head = deleteFromBeginning(head);
    printf("\nAfter deleting from the beginning:\n");
    displayList(head);

    // Delete from the end
    head = deleteFromEnd(head);
    printf("\nAfter deleting from the end:\n");
    displayList(head);

    // Delete from the middle
    head = deleteFromMiddle(head, 1);
    printf("\nAfter deleting from the middle:\n");
    displayList(head);

    // Free the allocated memory
    freeList(head);

    return 0;
}
