#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}
void printList(struct Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}
struct Node* deleteAtBeginning(struct Node* head) {
    if (head == NULL) {
        printf("List is empty. Cannot delete from the beginning.\n");
        return NULL;
    }

    struct Node* newHead = head->next;
    if (newHead != NULL) {
        newHead->prev = NULL;
    }

    free(head);
    printf("Deleted node at the beginning.\n");
    return newHead;
}
struct Node* deleteAtEnd(struct Node* head) {
    if (head == NULL) {
        printf("List is empty. Cannot delete from the end.\n");
        return NULL;
    }

    struct Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    if (temp->prev != NULL) {
        temp->prev->next = NULL;
    } else {
    
        head = NULL;
    }

    free(temp);
    printf("Deleted node at the end.\n");
    return head;
}
struct Node* deleteAtMiddle(struct Node* head, int position) {
    if (head == NULL) {
        printf("List is empty. Cannot delete from the middle.\n");
        return NULL;
    }

    if (position < 1) {
        printf("Invalid position for deletion.\n");
        return head;
    }

    struct Node* temp = head;
    for (int i = 1; i < position && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Invalid position for deletion.\n");
        return head;
    }

    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    } else {

        head = temp->next;
    }

    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }

    free(temp);
    printf("Deleted node at position %d.\n", position);
    return head;
}
void freeList(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    struct Node* head = NULL;

    head = createNode(1);
    head->next = createNode(2);
    head->next->prev = head;
    head->next->next = createNode(3);
    head->next->next->prev = head->next;

    printf("Original linked list:\n");
    printList(head);

    head = deleteAtBeginning(head);
    printf("Linked list after deletion at the beginning:\n");
    printList(head);

    head = deleteAtEnd(head);
    printf("Linked list after deletion at the end:\n");
    printList(head);

    head = deleteAtMiddle(head, 2);
    printf("Linked list after deletion at position 2:\n");
    printList(head);

    freeList(head);

    return 0;
}
